buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "net.saliman:gradle-cobertura-plugin:4.0.0"
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
    }
}

apply plugin: 'java-library'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: "net.saliman.cobertura"
apply plugin: 'com.github.kt3k.coveralls'

group = 'no.saua.remock'
sourceCompatibility = 1.8
targetCompatibility = 1.8
version = '2.1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    minimumSpringVersion = '5.0.0.RELEASE'
}

dependencies {
    api 'org.mockito:mockito-core:4.4.0'
    api 'org.springframework:spring-test:' + minimumSpringVersion
    api 'org.springframework:spring-beans:' + minimumSpringVersion

    implementation 'org.slf4j:slf4j-api:1.7.7'
    implementation 'javax.inject:javax.inject:1'

    testImplementation 'junit:junit:4.12'
    testImplementation 'com.google.truth:truth:1.1.3'

    // Logging
    testImplementation 'org.apache.logging.log4j:log4j-api:2.1'
    testImplementation 'org.apache.logging.log4j:log4j-core:2.1'
    testImplementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.1'
    testImplementation 'org.slf4j:jcl-over-slf4j:1.7.10'

    // Testing webapp mocking
    testImplementation 'org.springframework:spring-webmvc:' + minimumSpringVersion
    testImplementation 'javax.servlet:javax.servlet-api:3.1.0'
}

// Test against multiple versions of spring.
def springVersionsToTest = [minimumSpringVersion, '5.0.+', '5.1.+', '5.2.+', '5.3.+']
springVersionsToTest.each { version ->
    def config = configurations.create("testSpringCompile_" + version)
    config.extendsFrom(configurations.testImplementation)
    config.resolutionStrategy.eachDependency {
        if (it.requested.group == 'org.springframework') {
            it.useVersion version
        }
    }

    tasks.create(name: "testSpring_$version", type: Test) {
        classpath = config + sourceSets.main.output + sourceSets.test.output
        check.dependsOn it
    }
}

javadoc {
    // While remock is not dependant on junit, parts of Mockito uses junit.
    // This causes the javadoc-er to malfunction because it is unable to read those
    // without. Using the sourceSets.main.runtimeClasspath fixes this.
    // ... also note that sonatype actually requires a javadoc even though we supply sources.
    classpath = sourceSets.main.runtimeClasspath
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

tasks.withType(Test) {
    testLogging {
        events "failed"
        exceptionFormat "short"
    }
    // Exclude the inner classes of ContextCacheTest, but not the class itself. Gradle will try to run both the suite
    // and the tests alone. Alone will fail because the tests are dependent on the run-order.
    exclude 'no/saua/remock/ContextCacheTest$*'
}

artifacts {
    archives sourcesJar, javadocJar
}

wrapper {
    gradleVersion = '6.9.1'
}

cobertura.coverageFormats = ['html', 'xml']

// Only configure uploadArchives if username/password is set.

if (project.hasProperty("sonatypeUsername")) {
    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                pom.project {
                    name 'Remock'
                    packaging 'jar'
                    description 'Remock is a library for mocking up Spring beans with Mockito'
                    url 'http://github.com/ksaua/remock'

                    scm {
                        url 'scm:git@github.com:ksaua/remock.git'
                        connection 'scm:git@github.com:ksaua/remock.git'
                        developerConnection 'scm:git@github.com:ksaua/remock.git'
                    }

                    licenses {
                        license {
                            name 'The MIT License'
                            url 'http://opensource.org/licenses/MIT'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'ksaua'
                            name 'Knut Saua Mathiesen'
                        }
                    }
                }
            }
        }
    }
}

